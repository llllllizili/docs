import{_ as s}from"./2024-03-21-11-34-41-B4a-Uzi6.js";import{_ as a,c as n,o as i,f as e}from"./app-BfCDUtKQ.js";const l="/assets/2024-03-21-14-15-54-CeVpvrMB.png",o="/assets/2024-03-21-14-51-09-CdlFbJHP.png",r="/assets/2024-03-21-15-06-08-BiQOea4f.png",p={},t=e(`<h1 id="" tabindex="-1"><a class="header-anchor" href="#"><span></span></a></h1><p>当我们需要采集不同的监控指标(例如：主机、MySQL、Nginx)时，我们只需要运行相应的监控采集程序，并且让Prometheus Server知道这些Exporter实例的访问地址。在Prometheus中，每一个暴露监控样本数据的HTTP服务称为一个实例。例如在当前主机上运行的node exporter可以被称为一个实例(Instance)。</p><div class="language-yaml line-numbers-mode" data-ext="yaml" data-title="yaml"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 指标采集配置</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">scrape_configs</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # 任务名称</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  - </span><span style="color:#E06C75;--shiki-dark:#E06C75;">job_name</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;prometheus&quot;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # 实例列表</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    static_configs</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      - </span><span style="color:#E06C75;--shiki-dark:#E06C75;">targets</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: [</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;127.0.0.1:9090&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # 任务名称</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  - </span><span style="color:#E06C75;--shiki-dark:#E06C75;">job_name</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;node&quot;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # 实例列表</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    static_configs</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      - </span><span style="color:#E06C75;--shiki-dark:#E06C75;">targets</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">        - </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;192.168.1.32:9100&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">        - </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;192.168.200.102:9100&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="job" tabindex="-1"><a class="header-anchor" href="#job"><span>job</span></a></h2><p>Prometheus 默认有一个 prometheus 的job，该任务主要用于收集 Prometheus 自己的相关指标。</p><p>用户可以根据采集实例进行分类然后分配到不同的<code>job</code>。</p><p>比如将所有 <code>Node Exporter</code> 的实例分到名为 <code>node</code> 任务。job_name 定义的任务名称会以 <code>job=node</code>的格式作为标签被添加到时间序列中，这样就可以通过该标签对数据也进行分组。</p><p>通过 Prometheus 提供的 UI 界面可以看到目前的实例和任务相关情况：</p><figure><img src="`+s+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="实例" tabindex="-1"><a class="header-anchor" href="#实例"><span>实例</span></a></h2><p>简单来讲</p><p><code>instance</code>: 一个单独 scrape 的目标， 一般对应于一个进程。</p><p><code>jobs</code>: 一组同种类型的 instances</p><div class="language-yaml" data-ext="yaml" data-title="yaml"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">scrape_configs</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  - </span><span style="color:#E06C75;--shiki-dark:#E06C75;">job_name</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;node&quot;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    static_configs</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      - </span><span style="color:#E06C75;--shiki-dark:#E06C75;">targets</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">        - </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;192.168.1.32:9100&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  - </span><span style="color:#E06C75;--shiki-dark:#E06C75;">job</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">api-server</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    - </span><span style="color:#E06C75;--shiki-dark:#E06C75;">instance 1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">1.2.3.4:5670</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    - </span><span style="color:#E06C75;--shiki-dark:#E06C75;">instance 2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">1.2.3.4:5671</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    - </span><span style="color:#E06C75;--shiki-dark:#E06C75;">instance 3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">5.6.7.8:5670</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    - </span><span style="color:#E06C75;--shiki-dark:#E06C75;">instance 4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">5.6.7.8:5671</span></span></code></pre></div><p>而一组用于相同采集目的的实例，或者同一个采集进程的多个副本则通过一个一个任务(Job)进行管理。同时，Prometheus 也会给每一个实例添加一个 UP 指标：</p><figure><img src="`+l+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>当前在每一个Job中主要使用了静态配置(static_configs)的方式定义监控目标。除了静态配置每一个Job的采集Instance地址以外，Prometheus还支持与DNS、Consul、E2C、Kubernetes等进行集成实现自动发现Instance实例，并从这些Instance上获取监控数据。</p><h2 id="标签" tabindex="-1"><a class="header-anchor" href="#标签"><span>标签</span></a></h2><p>除了系统提供的job 标签以外，用户也可以自己添加标签：</p><div class="language-yaml" data-ext="yaml" data-title="yaml"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 指标采集配置</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">scrape_configs</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  - </span><span style="color:#E06C75;--shiki-dark:#E06C75;">job_name</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;node&quot;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    static_configs</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      - </span><span style="color:#E06C75;--shiki-dark:#E06C75;">targets</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">        - </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;192.168.1.32:9100&quot;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">        labels</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">          group</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;sre&quot;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">          env</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;product&quot;</span></span></code></pre></div><figure><img src="`+o+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="配置引用" tabindex="-1"><a class="header-anchor" href="#配置引用"><span>配置引用</span></a></h2><p>将 targets 的配置抽离成单独的文件，然后在主配置中引入，这样就避免了<code>static_configs</code>下配置的混乱</p><div class="language-yaml" data-ext="yaml" data-title="yaml"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 指标采集配置</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">scrape_configs</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">  ...</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # 新增用户测试文件的任务</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  - </span><span style="color:#E06C75;--shiki-dark:#E06C75;">job_name</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;node-exporter-file&quot;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # 从文件获取实例</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    file_sd_configs</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      - </span><span style="color:#E06C75;--shiki-dark:#E06C75;">files</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">        - </span><span style="color:#98C379;--shiki-dark:#98C379;">/opt/prometheus/conf/targets/node-exporter.yml</span></span></code></pre></div><p>node-exporter.yml 内容如下：</p><div class="language-yaml" data-ext="yaml" data-title="yaml"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">- </span><span style="color:#E06C75;--shiki-dark:#E06C75;">targets</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  - </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;192.168.1.32:9100&quot;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">  labels</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    group</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;sre&quot;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    env</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;product&quot;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # 加了个标识，用于区别</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    way</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;file&quot;</span></span></code></pre></div><figure><img src="`+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="其他" tabindex="-1"><a class="header-anchor" href="#其他"><span>其他</span></a></h2><p><code>kubernetes_sd_configs</code>: 实现k8s集群的服务发现</p><p><code>consul_sd_config</code> : 基于consul的服务发现</p><p>等</p>',31),c=[t];function B(d,k){return i(),n("div",null,c)}const F=a(p,[["render",B],["__file","04-job_instance.html.vue"]]),A=JSON.parse(`{"path":"/ops/monitor/prometheus/04-job_instance.html","title":"Job与Instance","lang":"zh-CN","frontmatter":{"article":true,"title":"Job与Instance","icon":null,"order":4,"index":true,"description":"当我们需要采集不同的监控指标(例如：主机、MySQL、Nginx)时，我们只需要运行相应的监控采集程序，并且让Prometheus Server知道这些Exporter实例的访问地址。在Prometheus中，每一个暴露监控样本数据的HTTP服务称为一个实例。例如在当前主机上运行的node exporter可以被称为一个实例(Instance)。 jo...","head":[["meta",{"property":"og:url","content":"https://docs.lizili.online/ops/monitor/prometheus/04-job_instance.html"}],["meta",{"property":"og:site_name","content":"lzz's Blog"}],["meta",{"property":"og:title","content":"Job与Instance"}],["meta",{"property":"og:description","content":"当我们需要采集不同的监控指标(例如：主机、MySQL、Nginx)时，我们只需要运行相应的监控采集程序，并且让Prometheus Server知道这些Exporter实例的访问地址。在Prometheus中，每一个暴露监控样本数据的HTTP服务称为一个实例。例如在当前主机上运行的node exporter可以被称为一个实例(Instance)。 jo..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-21T13:21:43.000Z"}],["meta",{"property":"article:author","content":"z"}],["meta",{"property":"article:modified_time","content":"2024-03-21T13:21:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Job与Instance\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-21T13:21:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"z\\",\\"url\\":\\"https://docs.lizili.online\\"}]}"]]},"headers":[{"level":2,"title":"job","slug":"job","link":"#job","children":[]},{"level":2,"title":"实例","slug":"实例","link":"#实例","children":[]},{"level":2,"title":"标签","slug":"标签","link":"#标签","children":[]},{"level":2,"title":"配置引用","slug":"配置引用","link":"#配置引用","children":[]},{"level":2,"title":"其他","slug":"其他","link":"#其他","children":[]}],"git":{"createdTime":1711027303000,"updatedTime":1711027303000,"contributors":[{"name":"lizili","email":"cn.zili.lee@outlook.com","commits":1}]},"readingTime":{"minutes":2.26,"words":679},"filePathRelative":"ops/monitor/prometheus/04-job&instance.md","localizedDate":"2024年3月21日","excerpt":"\\n<p>当我们需要采集不同的监控指标(例如：主机、MySQL、Nginx)时，我们只需要运行相应的监控采集程序，并且让Prometheus Server知道这些Exporter实例的访问地址。在Prometheus中，每一个暴露监控样本数据的HTTP服务称为一个实例。例如在当前主机上运行的node exporter可以被称为一个实例(Instance)。</p>\\n<div class=\\"language-yaml line-numbers-mode\\" data-ext=\\"yaml\\" data-title=\\"yaml\\"><pre class=\\"shiki shiki-themes one-dark-pro one-dark-pro vp-code\\" style=\\"background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf\\" tabindex=\\"0\\"><code><span class=\\"line\\"><span style=\\"color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\"># 指标采集配置</span></span>\\n<span class=\\"line\\"><span style=\\"color:#E06C75;--shiki-dark:#E06C75\\">scrape_configs</span><span style=\\"color:#ABB2BF;--shiki-dark:#ABB2BF\\">:</span></span>\\n<span class=\\"line\\"><span style=\\"color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">  # 任务名称</span></span>\\n<span class=\\"line\\"><span style=\\"color:#ABB2BF;--shiki-dark:#ABB2BF\\">  - </span><span style=\\"color:#E06C75;--shiki-dark:#E06C75\\">job_name</span><span style=\\"color:#ABB2BF;--shiki-dark:#ABB2BF\\">: </span><span style=\\"color:#98C379;--shiki-dark:#98C379\\">\\"prometheus\\"</span></span>\\n<span class=\\"line\\"><span style=\\"color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">    # 实例列表</span></span>\\n<span class=\\"line\\"><span style=\\"color:#E06C75;--shiki-dark:#E06C75\\">    static_configs</span><span style=\\"color:#ABB2BF;--shiki-dark:#ABB2BF\\">:</span></span>\\n<span class=\\"line\\"><span style=\\"color:#ABB2BF;--shiki-dark:#ABB2BF\\">      - </span><span style=\\"color:#E06C75;--shiki-dark:#E06C75\\">targets</span><span style=\\"color:#ABB2BF;--shiki-dark:#ABB2BF\\">: [</span><span style=\\"color:#98C379;--shiki-dark:#98C379\\">\\"127.0.0.1:9090\\"</span><span style=\\"color:#ABB2BF;--shiki-dark:#ABB2BF\\">]</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">  # 任务名称</span></span>\\n<span class=\\"line\\"><span style=\\"color:#ABB2BF;--shiki-dark:#ABB2BF\\">  - </span><span style=\\"color:#E06C75;--shiki-dark:#E06C75\\">job_name</span><span style=\\"color:#ABB2BF;--shiki-dark:#ABB2BF\\">: </span><span style=\\"color:#98C379;--shiki-dark:#98C379\\">\\"node\\"</span></span>\\n<span class=\\"line\\"><span style=\\"color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">    # 实例列表</span></span>\\n<span class=\\"line\\"><span style=\\"color:#E06C75;--shiki-dark:#E06C75\\">    static_configs</span><span style=\\"color:#ABB2BF;--shiki-dark:#ABB2BF\\">:</span></span>\\n<span class=\\"line\\"><span style=\\"color:#ABB2BF;--shiki-dark:#ABB2BF\\">      - </span><span style=\\"color:#E06C75;--shiki-dark:#E06C75\\">targets</span><span style=\\"color:#ABB2BF;--shiki-dark:#ABB2BF\\">:</span></span>\\n<span class=\\"line\\"><span style=\\"color:#ABB2BF;--shiki-dark:#ABB2BF\\">        - </span><span style=\\"color:#98C379;--shiki-dark:#98C379\\">\\"192.168.1.32:9100\\"</span></span>\\n<span class=\\"line\\"><span style=\\"color:#ABB2BF;--shiki-dark:#ABB2BF\\">        - </span><span style=\\"color:#98C379;--shiki-dark:#98C379\\">\\"192.168.200.102:9100\\"</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{F as comp,A as data};

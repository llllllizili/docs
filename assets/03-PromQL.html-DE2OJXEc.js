import{_ as a,c as e,a as s,f as n,o as t}from"./app-BfCDUtKQ.js";const l="/assets/2024-04-05-15-30-10-CduEbhlE.png",i="/assets/2024-04-05-17-28-00-B3dYemLV.png",o={},p=n(`<h1 id="" tabindex="-1"><a class="header-anchor" href="#"><span></span></a></h1><h2 id="时序数据库" tabindex="-1"><a class="header-anchor" href="#时序数据库"><span>时序数据库</span></a></h2><p>时序数据库（Time Series Database，简称TSDB）是专门用于处理时间序列数据的数据库。时间序列数据是一种按时间顺序排列的数据点集合，通常用于记录随时间变化的数据，如股票价格、气象数据、物联网设备传感器读数等。</p><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>  ^</span></span>
<span class="line"><span>  │   . . . . . . . . . . . . . . . . .   . . </span></span>
<span class="line"><span>  │     . . . . . . . . . . . .     . . . . . </span></span>
<span class="line"><span>  │     .     .   . . . . .   .     . . . . . </span></span>
<span class="line"><span>  │     .     . . . . . . . . . . . . .   . .  </span></span>
<span class="line"><span>  v</span></span>
<span class="line"><span>    &lt;------------------ 时间 ----------------&gt;</span></span></code></pre></div><p>横轴表示时间（通常是连续的时间线），纵轴表示测量的数值。每个数据点都对应一个时间戳和相应的数值</p><h2 id="数据" tabindex="-1"><a class="header-anchor" href="#数据"><span>数据</span></a></h2><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span># HELP node_cpu_seconds_total Seconds the CPUs spent in each mode.</span></span>
<span class="line"><span># TYPE node_cpu_seconds_total counter</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 指标名                    特征、维度              值</span></span>
<span class="line"><span>node_cpu_seconds_total{cpu=&quot;0&quot;,mode=&quot;idle&quot;} 4.583223844e+07</span></span>
<span class="line"><span>node_cpu_seconds_total{cpu=&quot;0&quot;,mode=&quot;iowait&quot;} 1612.86</span></span></code></pre></div><p>每一个点称为一个样本（sample），样本由以下三部分组成</p><ul><li>指标(metric)：metric name和描述当前样本特征的labelsets;</li><li>时间戳(timestamp)：一个精确到毫秒的时间戳;</li><li>样本值(value)： 一个float64的浮点型数据表示当前样本的值。</li></ul><p>Metric 指标的格式通常如下</p><div class="language-shell" data-ext="shell" data-title="shell"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;metric name&gt;{&lt;label name&gt;=&lt;label value&gt;, ...}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 同一个数据 两个表达方式</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">api_http_requests_total</span><span style="color:#98C379;--shiki-dark:#98C379;">{method=</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">&quot;POST&quot;</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">,</span><span style="color:#98C379;--shiki-dark:#98C379;"> handler=&quot;/messages&quot;}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">{__name__=&quot;api_http_requests_total&quot;，method=&quot;POST&quot;, handler=&quot;/messages&quot;}</span></span></code></pre></div><h2 id="指标类型" tabindex="-1"><a class="header-anchor" href="#指标类型"><span>指标类型</span></a></h2><p>Prometheus 的数据均以时序数据(time-serries)的形式保存在TSDB。这些指标也有这细微的差别，有的为固定值，有的为持续增大等。因此Prometheus定义了四个不同的指标类型，Counter（计数器）、Gauge（仪表盘）、Histogram（直方图）、Summary（摘要）。或这样理解</p><ul><li>Counter: 只增不减的单变量</li><li>Gauge：可增可减的单变量</li><li>Histogram：多桶统计的多变量</li><li>Summary：聚合统计的多变量</li></ul><h3 id="counter" tabindex="-1"><a class="header-anchor" href="#counter"><span>Counter</span></a></h3><p>只增不减。如常见的http_requests_total，若非系统重置，永远增加。（如自定义Counter类型指标时，建议使用_total结尾）</p><p>counter类型，结合时序数据的特点，非常容易就能记录时间发生的次数，了解趋势喝概率，比如</p><ul><li>请求的数量</li><li>任务完成的数量</li><li>函数调用次数</li><li>错误发生次数<br> ...</li></ul><p>例，通过rate()函数获取HTTP请求量的增长率：</p><div class="language-shell" data-ext="shell" data-title="shell"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">rate(http_requests_total[5m]</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span></code></pre></div><p>查询当前系统中，访问量前10的HTTP地址：</p><div class="language-shell" data-ext="shell" data-title="shell"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">topk(10,</span><span style="color:#98C379;--shiki-dark:#98C379;"> http_requests_total</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span></code></pre></div><h3 id="gauge" tabindex="-1"><a class="header-anchor" href="#gauge"><span>Gauge</span></a></h3><p>可增可减的数据，比如常见可用内存，已用内存等，均为gauge类型。比如： :node_memory_MemFree_bytes</p><p>对于 gauge类型的数据，可以通过内置的函数，获取指定指定时间范围的内数据，用来做计算，比如求平均值，求差，甚至趋势预测等,比如</p><ul><li>温度</li><li>内存用量</li><li>并发请求数<br> ...</li></ul><p>使用predict_linear()对数据的变化趋势进行预测。例如，预测空闲内存，在4小时后的情况</p><figure><img src="`+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="histogram" tabindex="-1"><a class="header-anchor" href="#histogram"><span>Histogram</span></a></h3><p>Histogram主用于统计和分析样本的分布情况。会对观测数据取样，然后将观测数据放入有数值上界的桶中，并记录各桶中数据的个数，所有数据的个数和数据数值总和。</p><blockquote><p>以系统 API 调用的平均响应时间为例：如果大多数 API 请求都维持在 100ms 的响应时间范围内，而个别请求的响应时间需要 5s，那么就会导致某些 WEB 页面的响应时间落到中位数的情况，而这种现象被称为长尾问题。</p></blockquote><blockquote><p>为了区分是平均的慢还是长尾的慢，最简单的方式就是按照请求延迟的范围进行分组。例如，统计延迟在 0~10ms 之间的请求数有多少而 10~20ms 之间的请求数又有多少。通过这种方式可以快速分析系统慢的原因。Histogram 和 Summary 都是为了能够解决这样问题的存在，通过 Histogram 和 Summary 类型的监控指标，我们可以快速了解监控样本的分布情况。</p></blockquote><p>Histogram 类型的样本会提供三种指标：</p><ul><li>样本的值分布在 bucket 中的数量，命名为 _bucket{le=&quot;&lt;上边界&gt;&quot;}。解释的更通俗易懂一点，这个值表示指标值小于等于上边界的所有样本数量。</li></ul><figure><img src="'+i+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>所有样本值的大小总和，命名为 _sum。</li><li>样本总数，命名为 _count。值和 _bucket{le=&quot;+Inf&quot;} 相同。</li></ul><h3 id="summary" tabindex="-1"><a class="header-anchor" href="#summary"><span>Summary</span></a></h3><p>与 Histogram 类型类似，用于表示一段时间内的数据采样结果（通常是请求持续时间或响应大小等），但它直接存储了分位数（通过客户端计算，然后展示出来），而不是通过区间来计算。</p><p>summary的指标也分为三类（括号内以http请求为例）</p><ul><li>样本总数，命名为 _count 。（一共发生了x次请求）</li><li>所有样本值的大小总和，命名为 _sum。 （x次的请求响应总和为多少）</li><li>样本值的分位数分布情况{quantile=&quot;分位数&quot;} （有多少请求的响应，是在x毫秒）</li></ul><hr>',41);function r(c,d){return t(),e("div",null,[p,s(` 
引用：

[详细解读 Prometheus 的指标类型
](https://mp.weixin.qq.com/s?__biz=MzU1MzY4NzQ1OA==&amp;mid=2247484326&amp;idx=1&amp;sn=d47c87f9fd3053de0aa49637258a57ca&amp;chksm=fbee436bcc99ca7d737e4b31b58c8fcb55ac13bda6ae580d9e2c0bed1f3f30ad3671985bc203&amp;scene=21#wechat_redirect)

[一文搞懂Prometheus直方图](https://cloud.tencent.com/developer/article/1495303) `)])}const u=a(o,[["render",r],["__file","03-PromQL.html.vue"]]),m=JSON.parse(`{"path":"/ops/monitor/prometheus/03-PromQL.html","title":"PromQL","lang":"zh-CN","frontmatter":{"article":true,"title":"PromQL","icon":null,"order":3,"index":true,"description":"时序数据库 时序数据库（Time Series Database，简称TSDB）是专门用于处理时间序列数据的数据库。时间序列数据是一种按时间顺序排列的数据点集合，通常用于记录随时间变化的数据，如股票价格、气象数据、物联网设备传感器读数等。 横轴表示时间（通常是连续的时间线），纵轴表示测量的数值。每个数据点都对应一个时间戳和相应的数值 数据 每一个点称为...","head":[["meta",{"property":"og:url","content":"https://docs.lizili.online/ops/monitor/prometheus/03-PromQL.html"}],["meta",{"property":"og:site_name","content":"lzz's Blog"}],["meta",{"property":"og:title","content":"PromQL"}],["meta",{"property":"og:description","content":"时序数据库 时序数据库（Time Series Database，简称TSDB）是专门用于处理时间序列数据的数据库。时间序列数据是一种按时间顺序排列的数据点集合，通常用于记录随时间变化的数据，如股票价格、气象数据、物联网设备传感器读数等。 横轴表示时间（通常是连续的时间线），纵轴表示测量的数值。每个数据点都对应一个时间戳和相应的数值 数据 每一个点称为..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-23T05:06:11.000Z"}],["meta",{"property":"article:author","content":"z"}],["meta",{"property":"article:modified_time","content":"2024-04-23T05:06:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"PromQL\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-23T05:06:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"z\\",\\"url\\":\\"https://docs.lizili.online\\"}]}"]]},"headers":[{"level":2,"title":"时序数据库","slug":"时序数据库","link":"#时序数据库","children":[]},{"level":2,"title":"数据","slug":"数据","link":"#数据","children":[]},{"level":2,"title":"指标类型","slug":"指标类型","link":"#指标类型","children":[{"level":3,"title":"Counter","slug":"counter","link":"#counter","children":[]},{"level":3,"title":"Gauge","slug":"gauge","link":"#gauge","children":[]},{"level":3,"title":"Histogram","slug":"histogram","link":"#histogram","children":[]},{"level":3,"title":"Summary","slug":"summary","link":"#summary","children":[]}]}],"git":{"createdTime":1711027303000,"updatedTime":1713848771000,"contributors":[{"name":"lizili","email":"cn.zili.lee@outlook.com","commits":3}]},"readingTime":{"minutes":4.44,"words":1332},"filePathRelative":"ops/monitor/prometheus/03-PromQL.md","localizedDate":"2024年3月21日","excerpt":"\\n<h2>时序数据库</h2>\\n<p>时序数据库（Time Series Database，简称TSDB）是专门用于处理时间序列数据的数据库。时间序列数据是一种按时间顺序排列的数据点集合，通常用于记录随时间变化的数据，如股票价格、气象数据、物联网设备传感器读数等。</p>\\n<div class=\\"language-\\" data-ext=\\"\\" data-title=\\"\\"><pre class=\\"shiki shiki-themes one-dark-pro one-dark-pro vp-code\\" style=\\"background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf\\" tabindex=\\"0\\"><code><span class=\\"line\\"><span>  ^</span></span>\\n<span class=\\"line\\"><span>  │   . . . . . . . . . . . . . . . . .   . . </span></span>\\n<span class=\\"line\\"><span>  │     . . . . . . . . . . . .     . . . . . </span></span>\\n<span class=\\"line\\"><span>  │     .     .   . . . . .   .     . . . . . </span></span>\\n<span class=\\"line\\"><span>  │     .     . . . . . . . . . . . . .   . .  </span></span>\\n<span class=\\"line\\"><span>  v</span></span>\\n<span class=\\"line\\"><span>    &lt;------------------ 时间 ----------------&gt;</span></span></code></pre>\\n</div>","autoDesc":true}`);export{u as comp,m as data};

import{_ as i,c as t,a,b as e,f as l,o as n}from"./app-BfCDUtKQ.js";const p="/assets/cc7d1f56-08d2-4786-b0e0-ad2b023d84fd-DS_hc-ii.png",r="/assets/%E7%89%88%E6%9C%AC%E5%8F%B7%E7%94%B3%E8%AF%B7%E8%A7%84%E5%88%92-%E6%B5%81%E7%A8%8B%E5%9B%BE-DS-uG86p.jpg",o="/assets/%E7%89%88%E6%9C%AC%E7%94%B3%E8%AF%B7%E7%BB%9F%E8%AE%A1-CYzlOz1i.png",s="/assets/%E5%BA%94%E7%94%A8-BAKm2Qsx.png",c={},d=e("h1",{id:"",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#"},[e("span")])],-1),h=e("p",null,"版本像是服装的款式和尺码，像是汽车的型号和生产批次，更像是一本书籍的出版号，每一个版本都有不同的内容和修订记录。通过版本我们能更了解我们的产品，能保证产品的质量与可靠性，能更好的连接用户",-1),g=l(`<h2 id="为什么做" tabindex="-1"><a class="header-anchor" href="#为什么做"><span>为什么做？</span></a></h2><p>通常觉得不需要，主要是两点：</p><pre><code>- 项目不多。没有版本号，影响不大
- 人员不多。问题解决比较方便
</code></pre><p>一旦团队人数稍微上去一些，各种问题就接踵而至，代码冲突、文件丢失、版本覆盖、制品不一致等问题，让人心力憔悴。越发觉得版本的重要性</p><h2 id="意义" tabindex="-1"><a class="header-anchor" href="#意义"><span>意义</span></a></h2><p>有了版本管理，之前的问题，可以减少，或者不再出现。而且版本管理带来以下几个作用：</p><ol><li>追溯: 每个版本的变化，了解软件从哪里来、经历了什么，fix也有迹可循</li><li>协作: 版本在内、外传递，保证大家工作的一致性</li><li>可控制：软件的质量和稳定性，可通过版本标记，以确保制品的稳定</li><li>统一：避免理解误差</li></ol><h2 id="如何做" tabindex="-1"><a class="header-anchor" href="#如何做"><span>如何做？</span></a></h2><p>版本控制系统: 其实就是我们常用的Git、SVN等。但研发通常只用来做，团队的协同开发，并没有把版本带入进去。</p><p>分支管理: 主分支、开发分支、测试分支、发布分支等。</p><p>版本号管理: 结合CI，进行强制绑定</p><p>提交信息管理：DevOps 时，一定要做提交规范</p><h2 id="具体规划" tabindex="-1"><a class="header-anchor" href="#具体规划"><span>具体规划</span></a></h2><p>在了解了版本相关的知识后，做了如下操作。</p><h3 id="明确目的" tabindex="-1"><a class="header-anchor" href="#明确目的"><span>明确目的</span></a></h3><p>通过建立版本号申请流程，规避产线版本号不统一、版本号复用、不规范等问题。降低项目交付中的因为版本号引起的故障概率，提升git pipeline中流水线的效率</p><p>总结一下就是，解决以下几个问题，达到提升制品质量和交付质量的目的。</p><ol><li>版本号不统一</li><li>版本号复用</li><li>fix版本缺失</li><li>功能与版本不统一</li></ol><h3 id="制定原则" tabindex="-1"><a class="header-anchor" href="#制定原则"><span>制定原则</span></a></h3><ol><li><p>自动化</p><p>降低误差，减少人员重复性操作，保证了工作的效率，避免了类似等待这种，无意义的时间消耗。</p></li><li><p>最少的改变</p><p>尽量保持目前工作习惯，尽可能不要去做一些推倒性动作，避免工作受阻。</p></li><li><p>足够简单</p><p>尽可能少的操作。过多的操作会影响整个流程效率以及工作的推进，落地困难。</p></li></ol><h3 id="确定方案" tabindex="-1"><a class="header-anchor" href="#确定方案"><span>确定方案</span></a></h3><figure><img src="`+p+'" alt="版本号申请" tabindex="0" loading="lazy"><figcaption>版本号申请</figcaption></figure><figure><img src="'+r+'" alt="整体流程" tabindex="0" loading="lazy"><figcaption>整体流程</figcaption></figure><h3 id="实施推进" tabindex="-1"><a class="header-anchor" href="#实施推进"><span>实施推进</span></a></h3><ol><li>研发流程</li><li>运维pipeline</li><li>开发管理平台</li></ol><h3 id="最终结果" tabindex="-1"><a class="header-anchor" href="#最终结果"><span>最终结果</span></a></h3><figure><img src="'+o+'" alt="版本申请统计" tabindex="0" loading="lazy"><figcaption>版本申请统计</figcaption></figure><figure><img src="'+s+'" alt="应用统计" tabindex="0" loading="lazy"><figcaption>应用统计</figcaption></figure><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>版本管理是软件开发中的重要环节，它可以帮助团队成员协同工作、管理代码和制品的变化、提高工作效率和质量。自动化部署和测试等都高度依赖版本管理。做好版本的管理，可谓是团队步入正轨的第一步。</p>',30);function m(f,u){return n(),t("div",null,[d,h,a("more"),g])}const E=i(c,[["render",m],["__file","版本管理.html.vue"]]),x=JSON.parse(`{"path":"/coder/team/%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86.html","title":"制品版本管理","lang":"zh-CN","frontmatter":{"title":"制品版本管理","order":99,"category":["工作分享"],"tag":["团队"],"index":true,"article":false,"description":"版本像是服装的款式和尺码，像是汽车的型号和生产批次，更像是一本书籍的出版号，每一个版本都有不同的内容和修订记录。通过版本我们能更了解我们的产品，能保证产品的质量与可靠性，能更好的连接用户 为什么做？ 通常觉得不需要，主要是两点： 一旦团队人数稍微上去一些，各种问题就接踵而至，代码冲突、文件丢失、版本覆盖、制品不一致等问题，让人心力憔悴。越发觉得版本的重...","head":[["meta",{"property":"og:url","content":"https://docs.lizili.online/coder/team/%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86.html"}],["meta",{"property":"og:site_name","content":"lzz's Blog"}],["meta",{"property":"og:title","content":"制品版本管理"}],["meta",{"property":"og:description","content":"版本像是服装的款式和尺码，像是汽车的型号和生产批次，更像是一本书籍的出版号，每一个版本都有不同的内容和修订记录。通过版本我们能更了解我们的产品，能保证产品的质量与可靠性，能更好的连接用户 为什么做？ 通常觉得不需要，主要是两点： 一旦团队人数稍微上去一些，各种问题就接踵而至，代码冲突、文件丢失、版本覆盖、制品不一致等问题，让人心力憔悴。越发觉得版本的重..."}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-10T04:16:31.000Z"}],["meta",{"property":"article:author","content":"z"}],["meta",{"property":"article:tag","content":"团队"}],["meta",{"property":"article:modified_time","content":"2024-11-10T04:16:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"制品版本管理\\",\\"description\\":\\"版本像是服装的款式和尺码，像是汽车的型号和生产批次，更像是一本书籍的出版号，每一个版本都有不同的内容和修订记录。通过版本我们能更了解我们的产品，能保证产品的质量与可靠性，能更好的连接用户 为什么做？ 通常觉得不需要，主要是两点： 一旦团队人数稍微上去一些，各种问题就接踵而至，代码冲突、文件丢失、版本覆盖、制品不一致等问题，让人心力憔悴。越发觉得版本的重...\\"}"]]},"headers":[{"level":2,"title":"为什么做？","slug":"为什么做","link":"#为什么做","children":[]},{"level":2,"title":"意义","slug":"意义","link":"#意义","children":[]},{"level":2,"title":"如何做？","slug":"如何做","link":"#如何做","children":[]},{"level":2,"title":"具体规划","slug":"具体规划","link":"#具体规划","children":[{"level":3,"title":"明确目的","slug":"明确目的","link":"#明确目的","children":[]},{"level":3,"title":"制定原则","slug":"制定原则","link":"#制定原则","children":[]},{"level":3,"title":"确定方案","slug":"确定方案","link":"#确定方案","children":[]},{"level":3,"title":"实施推进","slug":"实施推进","link":"#实施推进","children":[]},{"level":3,"title":"最终结果","slug":"最终结果","link":"#最终结果","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1680433735000,"updatedTime":1731212191000,"contributors":[{"name":"lizili","email":"cn.zili.lee@outlook.com","commits":1}]},"readingTime":{"minutes":2.85,"words":856},"filePathRelative":"coder/team/版本管理.md","localizedDate":"2023年4月2日","excerpt":"\\n<p>版本像是服装的款式和尺码，像是汽车的型号和生产批次，更像是一本书籍的出版号，每一个版本都有不同的内容和修订记录。通过版本我们能更了解我们的产品，能保证产品的质量与可靠性，能更好的连接用户</p>\\n<!--more-->\\n<h2>为什么做？</h2>\\n<p>通常觉得不需要，主要是两点：</p>\\n<pre><code>- 项目不多。没有版本号，影响不大\\n- 人员不多。问题解决比较方便\\n</code></pre>\\n<p>一旦团队人数稍微上去一些，各种问题就接踵而至，代码冲突、文件丢失、版本覆盖、制品不一致等问题，让人心力憔悴。越发觉得版本的重要性</p>\\n<h2>意义</h2>\\n<p>有了版本管理，之前的问题，可以减少，或者不再出现。而且版本管理带来以下几个作用：</p>","autoDesc":true}`);export{E as comp,x as data};

import{_ as l,c as n,b as s,h as a,e as o,w as r,f as p,g as i,o as t}from"./app-BfCDUtKQ.js";const c="/assets/2024-03-25-14-32-16-yv-ni2J3.png",d="/assets/2024-03-25-18-17-02-BkcX66SF.png",B={},k=s("h1",{id:"",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#"},[s("span")])],-1),h=s("code",null,"relabel_configs",-1),y=p('<h2 id="replace-laabelmap" tabindex="-1"><a class="header-anchor" href="#replace-laabelmap"><span>replace&amp;laabelmap</span></a></h2><p>在Prometheus所有的Target实例中，都包含一些默认的Metadata标签信息。可以通过Prometheus UI的Targets页面中查看这些实例的Metadata标签的内容：</p><p>在Prometheus的所有的实例中，都包含了一些默认的元数据(Metadata)标签，如下图</p><figure><img src="'+c+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>如： <code>__address__</code> ：当前Target实例的访问地址<code>&lt;host&gt;:&lt;port&gt;</code> , 通常来说，Target以<code>__</code>作为前置的标签是在系统内部使用的,有点像PY的私有方法，因此这些标签不会被写入到样本数据中，如果需要，可通过<code>scrape_configs</code>进行操作</p><h3 id="replace" tabindex="-1"><a class="header-anchor" href="#replace"><span>replace</span></a></h3><p>一个简单的例子</p><div class="language-yaml" data-ext="yaml" data-title="yaml"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">scrape_configs</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  - </span><span style="color:#E06C75;--shiki-dark:#E06C75;">job_name</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">test</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    kubernetes_sd_configs</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    - </span><span style="color:#E06C75;--shiki-dark:#E06C75;">role</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">pod</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">      api_server</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">http://xxxx.xx.xx:xxxx</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">      tls_config</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">        insecure_skip_verify</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#D19A66;--shiki-dark:#D19A66;">true</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    relabel_configs</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    - </span><span style="color:#E06C75;--shiki-dark:#E06C75;">source_labels</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:  [</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;__address__&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">      target_label</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;address&quot;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      #action: replace  # 这个是默认的行为，如果未指定action，则为replace</span></span></code></pre></div><p>将 <code>source_labels</code> 下 <code>__address__</code> 的值，赋值到标签为 <code>addr</code> 下。</p><p>除了使用<code>replace</code>以外，还可以指定<code>action</code>为<code>labelmap</code>，labelmap会根据<code>regex</code>的定义去匹配所有实例标签名称，并且以匹配到的内容为新的标签名，其值作为新标签的值</p><div class="language-yaml" data-ext="yaml" data-title="yaml"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">- </span><span style="color:#E06C75;--shiki-dark:#E06C75;">job_name</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;kubernetes-nodes&#39;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">  kubernetes_sd_configs</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  - </span><span style="color:#E06C75;--shiki-dark:#E06C75;">role</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">node</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">  relabel_configs</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  - </span><span style="color:#E06C75;--shiki-dark:#E06C75;">action</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">labelmap</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    regex</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">__meta_kubernetes_node_label_(.+)</span></span></code></pre></div><p>还可以使用<code>labelkeep</code>和<code>keepdrop</code>对标签进行过滤，是丢弃还是保留。</p><div class="language-yaml" data-ext="yaml" data-title="yaml"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">relabel_configs</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  - </span><span style="color:#E06C75;--shiki-dark:#E06C75;">regex</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">label_should_drop_(.+)</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    action</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">labeldrop</span></span></code></pre></div><p>总结： 通过Relabeling机制，可以对prometheus实例的标签进行规范的管理与维护。有了标签的规范，后续就可按标签做很多事情</p><h3 id="keep-drop" tabindex="-1"><a class="header-anchor" href="#keep-drop"><span>keep/drop</span></a></h3><p>标签虽有了管理，但如果是通过配置中心或集群发现等，自动发现服务，server端若不做控制，将会发现所有的实例，这一点是我们不想看到的。比如我们在集群中加了个测试节点，或者有多个server，做业务区分等。此时可通过keep/drop行为，来做过滤。</p><div class="language-yaml" data-ext="yaml" data-title="yaml"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">scrape_configs</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  - </span><span style="color:#E06C75;--shiki-dark:#E06C75;">job_name</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">test</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    kubernetes_sd_configs</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    - </span><span style="color:#E06C75;--shiki-dark:#E06C75;">role</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">pod</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">      api_server</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">http://xxxx.xx.xx:xxxx</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">      tls_config</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">        insecure_skip_verify</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#D19A66;--shiki-dark:#D19A66;">true</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    relabel_configs</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    - </span><span style="color:#E06C75;--shiki-dark:#E06C75;">source_labels</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:  [</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;__address__&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">      regex</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;192.168.2.133:10249&quot;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">      action</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">keep</span></span></code></pre></div><p><strong>action设置为keep，会根据regex匹配后进行保留。若为drop则为丢弃</strong></p><h3 id="hashmod" tabindex="-1"><a class="header-anchor" href="#hashmod"><span>hashmod</span></a></h3><div class="language-yaml" data-ext="yaml" data-title="yaml"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">scrape_configs</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    - </span><span style="color:#E06C75;--shiki-dark:#E06C75;">job_name</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;test&#39;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    relabel_configs</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">        - </span><span style="color:#E06C75;--shiki-dark:#E06C75;">source_labels</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: [</span><span style="color:#98C379;--shiki-dark:#98C379;">__address__</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">        modulus</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:       </span><span style="color:#D19A66;--shiki-dark:#D19A66;">4</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">        target_label</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:  </span><span style="color:#98C379;--shiki-dark:#98C379;">tmp_hash</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">        action</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:        </span><span style="color:#98C379;--shiki-dark:#98C379;">hashmod</span></span></code></pre></div><p><a href="https://github.com/prometheus/prometheus/blob/main/model/relabel/relabel.go#L289" target="_blank" rel="noopener noreferrer">https://github.com/prometheus/prometheus/blob/main/model/relabel/relabel.go#L289</a></p><p>根据当前Target实例__address__的值以4作为系数，这样每个Target实例都会包含一个新的标签tmp_hash，并且该值的范围在1~4之间，查看Target实例的标签信息，可以看到如下的结果，每一个Target实例都包含了一个新的tmp_hash值</p><figure><img src="`+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',23);function m(C,b){const e=i("RouteLink");return t(),n("div",null,[k,s("p",null,[a("在"),o(e,{to:"/ops/monitor/prometheus/05-exporter.html"},{default:r(()=>[a("exporter")]),_:1}),a("的配置与集成环节，接触了文件的引入(动态服务发现方法之一)和"),h,a("，看的一脸懵逼，所以去详细看了下，并记录一下。")]),y])}const F=l(B,[["render",m],["__file","06-relabel.html.vue"]]),_=JSON.parse(`{"path":"/ops/monitor/prometheus/06-relabel.html","title":"Relabel","lang":"zh-CN","frontmatter":{"article":true,"title":"Relabel","icon":null,"order":6,"index":true,"description":"在的配置与集成环节，接触了文件的引入(动态服务发现方法之一)和relabel_configs，看的一脸懵逼，所以去详细看了下，并记录一下。 replace&laabelmap 在Prometheus所有的Target实例中，都包含一些默认的Metadata标签信息。可以通过Prometheus UI的Targets页面中查看这些实例的Metadata标...","head":[["meta",{"property":"og:url","content":"https://docs.lizili.online/ops/monitor/prometheus/06-relabel.html"}],["meta",{"property":"og:site_name","content":"lzz's Blog"}],["meta",{"property":"og:title","content":"Relabel"}],["meta",{"property":"og:description","content":"在的配置与集成环节，接触了文件的引入(动态服务发现方法之一)和relabel_configs，看的一脸懵逼，所以去详细看了下，并记录一下。 replace&laabelmap 在Prometheus所有的Target实例中，都包含一些默认的Metadata标签信息。可以通过Prometheus UI的Targets页面中查看这些实例的Metadata标..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-26T07:54:42.000Z"}],["meta",{"property":"article:author","content":"z"}],["meta",{"property":"article:modified_time","content":"2024-03-26T07:54:42.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Relabel\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-26T07:54:42.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"z\\",\\"url\\":\\"https://docs.lizili.online\\"}]}"]]},"headers":[{"level":2,"title":"replace&laabelmap","slug":"replace-laabelmap","link":"#replace-laabelmap","children":[{"level":3,"title":"replace","slug":"replace","link":"#replace","children":[]},{"level":3,"title":"keep/drop","slug":"keep-drop","link":"#keep-drop","children":[]},{"level":3,"title":"hashmod","slug":"hashmod","link":"#hashmod","children":[]}]}],"git":{"createdTime":1711439682000,"updatedTime":1711439682000,"contributors":[{"name":"lizili","email":"cn.zili.lee@outlook.com","commits":1}]},"readingTime":{"minutes":2.23,"words":669},"filePathRelative":"ops/monitor/prometheus/06-relabel.md","localizedDate":"2024年3月26日","excerpt":"\\n<p>在<a href=\\"/ops/monitor/prometheus/05-exporter.html\\" target=\\"_blank\\">exporter</a>的配置与集成环节，接触了文件的引入(动态服务发现方法之一)和<code>relabel_configs</code>，看的一脸懵逼，所以去详细看了下，并记录一下。</p>\\n<h2>replace&amp;laabelmap</h2>\\n<p>在Prometheus所有的Target实例中，都包含一些默认的Metadata标签信息。可以通过Prometheus UI的Targets页面中查看这些实例的Metadata标签的内容：</p>","autoDesc":true}`);export{F as comp,_ as data};

import{_ as e,c as s,o as r,f as a}from"./app-BfCDUtKQ.js";const o="/assets/2024-03-08-16-26-53-DftXCUsF.png",n="/assets/2024-03-08-16-25-48-DvcCgKRQ.png",t="/assets/2024-03-08-16-26-27-DpH3u0is.png",i="/assets/2024-03-08-16-26-40-BHCb64BX.png",l={},p=a(`<blockquote><p>原文来自 <a href="https://ewhisper.cn/" target="_blank" rel="noopener noreferrer">EWhisper.cn</a></p></blockquote><h2 id="prometheus-operator" tabindex="-1"><a class="header-anchor" href="#prometheus-operator"><span>Prometheus Operator</span></a></h2><p>在 Kubernetes 上管理 Prometheus 集群，使用 Kubernetes 自定义资源（CRD），简化了 Prometheus、Alertmanager 和相关监控组件的部署和配置。目前提供四种资源类型</p><ul><li>Prometheus：声明式创建和管理Prometheus Server实例</li><li>ServiceMonitor：负责声明式的管理监控配置</li><li>PrometheusRule：负责声明式的管理告警配置</li><li>Alertmanager：声明式的创建和管理Alertmanager实例</li></ul><p>简言之，Prometheus Operator能够帮助用户自动化的创建以及管理Prometheus Server以及其相应的配置。</p><h2 id="kube-prometheus" tabindex="-1"><a class="header-anchor" href="#kube-prometheus"><span>kube-prometheus</span></a></h2><p><a href="https://github.com/prometheus-operator/kube-prometheus" target="_blank" rel="noopener noreferrer">kube-prometheus</a> 提供了一个基于 Prometheus 和 Prometheus Operator 的完整集群监控堆栈的示例配置。这包括部署多个 Prometheus 和 Alertmanager 实例、用于收集节点指标的指标导出器（如 node_exporters)、将 Prometheus 链接到各种指标端点的目标配置，以及用于通知集群中潜在问题的示例警报规则。</p><h2 id="helm-chart" tabindex="-1"><a class="header-anchor" href="#helm-chart"><span>helm chart</span></a></h2><p><a href="https://github.com/prometheus-community/helm-charts/tree/main/charts/kube-prometheus-stack" target="_blank" rel="noopener noreferrer">prometheus-community/kube-prometheus-stack</a> helm chart 提供了与 kube-prometheus 相似的特性集。这张 chart 是由 prometheus 社区维护的。</p><h3 id="prometheus-operator-功能" tabindex="-1"><a class="header-anchor" href="#prometheus-operator-功能"><span>Prometheus Operator 功能</span></a></h3><h3 id="crd" tabindex="-1"><a class="header-anchor" href="#crd"><span>CRD</span></a></h3><p>Prometheus Operator 的一个核心特性是 watch Kubernetes API 服务器对特定对象的更改，并确保当前 Prometheus 部署与这些对象匹配。Operator 对以下自定义资源定义 (crd) 进行操作：</p><p><code>monitoring.coreos.com/v1</code>:</p><ul><li><code>Prometheus</code>: 它定义了 Prometheus 期望的部署。</li><li><code>Alertmanager</code>: 它定义了 AlertManager 期望的部署。</li><li><code>ThanosRuler</code>: 它定义了 ThanosRuler 期望的部署；如果有多个 Prometheus 实例，则通过 <code>ThanosRuler</code> 进行告警规则的统一管理。</li><li><code>ServiceMonitor</code>: Prometheus Operator 通过 <code>PodMonitor</code> 和 <code>ServiceMonitor</code> 实现对资源的监控，<code>ServiceMonitor</code> 用于通过 Service 对 K8S 中的任何资源进行监控，推荐首选 <code>ServiceMonitor</code>. 它声明性地指定了 Kubernetes service 应该如何被监控。Operator 根据 API 服务器中对象的当前状态自动生成 Prometheus 刮擦配置。</li><li><code>PodMonitor</code>: Prometheus Operator 通过 <code>PodMonitor</code> 和 <code>ServiceMonitor</code> 实现对资源的监控，<code>PodMonitor</code> 用于对 Pod 进行监控，推荐首选 <code>ServiceMonitor</code>. <code>PodMonitor</code> 声明性地指定了应该如何监视一组 pod。Operator 根据 API 服务器中对象的当前状态自动生成 Prometheus 刮擦配置。</li><li><code>Probe</code>: 它声明性地指定了应该如何监视 ingress 或静态目标组。Operator 根据定义自动生成 Prometheus 刮擦配置。</li><li><code>PrometheusRule</code>: 用于管理 Prometheus 告警规则；它定义了一套所需的 Prometheus 警报和/或记录规则。Prometheus 生成一个规则文件，可以被 Prometheus 实例使用。</li><li><code>AlertmanagerConfig</code>: 用于管理 AlertManager 配置文件，主要是告警发给谁；它声明性地指定 Alertmanager 配置的子部分，允许将警报路由到自定义接收器，并设置禁止规则。</li></ul><p>Prometheus Operator 自动检测 Kubernetes API 服务器对上述任何对象的更改，并确保匹配的部署和配置保持同步。</p><h3 id="简化的部署配置" tabindex="-1"><a class="header-anchor" href="#简化的部署配置"><span>简化的部署配置</span></a></h3><p>配置 Prometheus 的基础知识，如版本、持久性、保留策略和来自本机 Kubernetes 资源的副本。最简的持久化的 Prometheus 的部署，只需要创建如下 yaml 即可：</p><div class="language-yaml" data-ext="yaml" data-title="yaml"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">apiVersion</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">monitoring.coreos.com/v1</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">kind</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">Prometheus</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">metadata</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">  name</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">persisted</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">spec</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">  storage</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    volumeClaimTemplate</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">      spec</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">        storageClassName</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">ssd</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">        resources</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">          requests</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">            storage</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">40Gi</span></span></code></pre></div><h2 id="prometheus-目标配置" tabindex="-1"><a class="header-anchor" href="#prometheus-目标配置"><span>Prometheus 目标配置</span></a></h2><p>根据熟悉的 Kubernetes 标签查询自动生成监控目标配置；无需学习普罗米修斯特定的配置语言。</p><h2 id="大厂案例" tabindex="-1"><a class="header-anchor" href="#大厂案例"><span>大厂案例</span></a></h2><p>哪些大厂在用 Prometheus Operator 或 kube-prometheus?</p><h3 id="redhat" tabindex="-1"><a class="header-anchor" href="#redhat"><span>RedHat</span></a></h3><p>从 Prometheus Operator 的 API 也能看出来，这个 Operator 最早是由 CoreOS 开发并开源的，而现在 CoreOS 已经被 RedHat 收购，所以 RedHat 的 OpenShift 4 完全是采用 Prometheus Operator 作为它的 Metrics 解决方案的。典型的架构如下图：</p><figure><img src="`+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>可以看到 Prometheus 和 AlertManager 都是通过 Prometheus Operator 来进行管理的。</p><h3 id="rancher" tabindex="-1"><a class="header-anchor" href="#rancher"><span>Rancher</span></a></h3><p>Rancher 2 以后的 rancher-monitoring 也是基于 kube-prometheus 做了进一步的改进而来的，这是通过 rancher-monitoring helm chart 部署后的关系图，可以看到部署的组件还是非常多的：</p><ul><li>Grafana</li><li>Prometheus CRD</li><li>Prometheus Operator</li><li>Prometheus</li><li>AlertManager</li><li>kube-state-metrics</li><li>prometheus adapter</li><li>node exporter</li><li>...</li></ul><figure><img src="'+n+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>我为什么推荐你用 Prometheus Operator 或 kube-prometheus 而非原生 prometheus?</p><p>理由如下：</p><ol><li>众多大厂的选择；</li><li>极大简化了 Prometheus 的配置复杂度；</li><li>开箱即用的大量： <ol><li>监控对象，如：K8S 组件 - coredns, kubelet, controller manager, apiserver, etcd, scheduler, kube proxy; 监控组件自监控 - grafana, AlertManager, prometheus 等；</li><li>仪表板，自带 24 个仪表板，非常实用，涵盖：集群/组件/网络/存储/Node/Pod 等等维度；</li><li>告警规则，自带了 100 多个告警规则，涵盖 K8S 的方方面面；</li></ol></li><li>流行的开源产品，很多也默认会带有对 Prometheus Operator 的支持，如 Loki 就有相关的 ServiceMonitor;</li><li>通过 ServiceMonitor 等，其实反而相比添加 Prometheus Annotation 有更大的灵活性；如下面的例子</li><li>高可用的支持，如： <ol><li>多个 Prometheus 的 shards</li><li>多个 AlertManager</li><li>ThanosRuler</li></ol></li><li>RBAC: 如默认可以创建 3 个 monitoring 的角色：admin/edit/viewer, 可以分别对应监控的管理员，维护人员和只读用户；</li></ol><figure><img src="'+t+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+i+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>示例，灵活性：</p><div class="language-yaml line-numbers-mode" data-ext="yaml" data-title="yaml"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">spec</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">  endpoints</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    - </span><span style="color:#E06C75;--shiki-dark:#E06C75;">honorLabels</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#D19A66;--shiki-dark:#D19A66;">true</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">      params</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">        _scheme</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">          - </span><span style="color:#98C379;--shiki-dark:#98C379;">https</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">      port</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">metrics</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">      proxyUrl</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">http://pushprox-k3s-server-proxy.cattle-monitoring-system.svc:8080</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">      relabelings</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">        - </span><span style="color:#E06C75;--shiki-dark:#E06C75;">sourceLabels</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">            - </span><span style="color:#98C379;--shiki-dark:#98C379;">__metrics_path__</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">          targetLabel</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">metrics_path</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">  jobLabel</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">component</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">  namespaceSelector</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    matchNames</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      - </span><span style="color:#98C379;--shiki-dark:#98C379;">cattle-monitoring-system</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">  podTargetLabels</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    - </span><span style="color:#98C379;--shiki-dark:#98C379;">component</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    - </span><span style="color:#98C379;--shiki-dark:#98C379;">pushprox-exporter</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">  selector</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    matchLabels</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">      component</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">k3s-server</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">      k8s-app</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">pushprox-k3s-server-client</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">      provider</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">kubernetes</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">      release</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">rancher-monitoring</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="️-参考文档" tabindex="-1"><a class="header-anchor" href="#️-参考文档"><span>️ 参考文档</span></a></h2><ul><li><a href="https://github.com/prometheus-operator/prometheus-operator" target="_blank" rel="noopener noreferrer">prometheus-operator/prometheus-operator: Prometheus Operator creates/configures/manages Prometheus clusters atop Kubernetes (github.com)</a></li><li><a href="https://prometheus-operator.dev/" target="_blank" rel="noopener noreferrer">Prometheus Operator - Running Prometheus on Kubernetes (prometheus-operator.dev)</a></li><li><a href="https://operatorhub.io/operator/prometheus" target="_blank" rel="noopener noreferrer">OperatorHub.io | The registry for Kubernetes Operators</a></li></ul>`,39),c=[p];function h(d,u){return r(),s("div",null,c)}const k=e(l,[["render",h],["__file","20-Prometheus Operator 与 kube-prometheus.html.vue"]]),B=JSON.parse(`{"path":"/ops/monitor/prometheus/20-Prometheus%20Operator%20%E4%B8%8E%20kube-prometheus.html","title":"Operator与kube-prometheus","lang":"zh-CN","frontmatter":{"article":true,"title":"Operator与kube-prometheus","order":20,"category":["云原生"],"tag":["监控","prometheus"],"index":true,"description":"原文来自 EWhisper.cn Prometheus Operator 在 Kubernetes 上管理 Prometheus 集群，使用 Kubernetes 自定义资源（CRD），简化了 Prometheus、Alertmanager 和相关监控组件的部署和配置。目前提供四种资源类型 Prometheus：声明式创建和管理Prometheus S...","head":[["meta",{"property":"og:url","content":"https://docs.lizili.online/ops/monitor/prometheus/20-Prometheus%20Operator%20%E4%B8%8E%20kube-prometheus.html"}],["meta",{"property":"og:site_name","content":"lzz's Blog"}],["meta",{"property":"og:title","content":"Operator与kube-prometheus"}],["meta",{"property":"og:description","content":"原文来自 EWhisper.cn Prometheus Operator 在 Kubernetes 上管理 Prometheus 集群，使用 Kubernetes 自定义资源（CRD），简化了 Prometheus、Alertmanager 和相关监控组件的部署和配置。目前提供四种资源类型 Prometheus：声明式创建和管理Prometheus S..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-26T07:54:42.000Z"}],["meta",{"property":"article:author","content":"z"}],["meta",{"property":"article:tag","content":"监控"}],["meta",{"property":"article:tag","content":"prometheus"}],["meta",{"property":"article:modified_time","content":"2024-03-26T07:54:42.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Operator与kube-prometheus\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-26T07:54:42.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"z\\",\\"url\\":\\"https://docs.lizili.online\\"}]}"]]},"headers":[{"level":2,"title":"Prometheus Operator","slug":"prometheus-operator","link":"#prometheus-operator","children":[]},{"level":2,"title":"kube-prometheus","slug":"kube-prometheus","link":"#kube-prometheus","children":[]},{"level":2,"title":"helm chart","slug":"helm-chart","link":"#helm-chart","children":[{"level":3,"title":"Prometheus Operator 功能","slug":"prometheus-operator-功能","link":"#prometheus-operator-功能","children":[]},{"level":3,"title":"CRD","slug":"crd","link":"#crd","children":[]},{"level":3,"title":"简化的部署配置","slug":"简化的部署配置","link":"#简化的部署配置","children":[]}]},{"level":2,"title":"Prometheus 目标配置","slug":"prometheus-目标配置","link":"#prometheus-目标配置","children":[]},{"level":2,"title":"大厂案例","slug":"大厂案例","link":"#大厂案例","children":[{"level":3,"title":"RedHat","slug":"redhat","link":"#redhat","children":[]},{"level":3,"title":"Rancher","slug":"rancher","link":"#rancher","children":[]}]},{"level":2,"title":"️ 参考文档","slug":"️-参考文档","link":"#️-参考文档","children":[]}],"git":{"createdTime":1710147075000,"updatedTime":1711439682000,"contributors":[{"name":"lizili","email":"cn.zili.lee@outlook.com","commits":1}]},"readingTime":{"minutes":4.62,"words":1386},"filePathRelative":"ops/monitor/prometheus/20-Prometheus Operator 与 kube-prometheus.md","localizedDate":"2024年3月11日","excerpt":"<blockquote>\\n<p>原文来自 <a href=\\"https://ewhisper.cn/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">EWhisper.cn</a></p>\\n</blockquote>\\n<h2>Prometheus Operator</h2>\\n<p>在 Kubernetes 上管理 Prometheus 集群，使用 Kubernetes 自定义资源（CRD），简化了 Prometheus、Alertmanager 和相关监控组件的部署和配置。目前提供四种资源类型</p>\\n<ul>\\n<li>Prometheus：声明式创建和管理Prometheus Server实例</li>\\n<li>ServiceMonitor：负责声明式的管理监控配置</li>\\n<li>PrometheusRule：负责声明式的管理告警配置</li>\\n<li>Alertmanager：声明式的创建和管理Alertmanager实例</li>\\n</ul>","autoDesc":true}`);export{k as comp,B as data};
